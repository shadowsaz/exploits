--[[--
	|- lib:GrabSignal(index)
	|- lib:SpawnSignal(index)
		|-> signal:Fire(...)
		|-> signal:Connect(func)
		|-> signal:Invoke(...)
		|-> signal:SetInvoke(func)
		|-> signal:RemoveInvoke()
		|-> signal:Wait(timeout)
		|-> signal:Destroy()
	|- lib:SafeDestroy(object,waitTime)
	|- lib:WaitFor(parent,name,callback)
	|- lib:CreateBase(mode,child,root,offset)
	|- lib:CreateText(base,esp,data)
	|- lib:CreateButton(data,esp,base)
	|- lib:CreateEsp(data)
--]]--

local Toggle = "RightControl"
local Button = "LeftAlt"

loadstring(game:HttpGet("https://raw.githubusercontent.com/shadowsaz/exploits/main/espTemplate.lua"))()
local lib = getgenv()._355743517261299712
local esp = {
	Folders = {game:GetService("Players")},
	Toggled = lib:SpawnSignal(),
	Added = lib:SpawnSignal(),
	Removed = lib:SpawnSignal(),
	_ToggleKey = Enum.KeyCode[Toggle],
	_ButtonKey = Enum.KeyCode.LeftAlt,
	_CoreCons = {},
	OnCreate = function(self,esp)
		local coreBase = lib.CoreGui:FindFirstChild("CoreBase")
		if not coreBase then
			coreBase = Instance.new("ScreenGui")
			coreBase.Name = "CoreBase"
			coreBase.IgnoreGuiInset = true
			coreBase.ResetOnSpawn = false
			coreBase.DisplayOrder = 999999999
			coreBase:SetAttribute("Count",0)
			syn.protect_gui(coreBase)
			coreBase.Parent = lib.CoreGui
		end
		coreBase:SetAttribute("Count",coreBase:GetAttribute("Count")+1)
		--------------------------------
		if not lib._DistCon then
			lib._DistLabels = {}
			local distCon = lib.RunService.Stepped:Connect(function()
				if not esp.Enabled then return end
				local pos = workspace.CurrentCamera.CFrame.Position
				for base,textLabel in pairs(lib._DistLabels) do
					if not base.Root or not textLabel then 
						lib._DistLabels[base] = nil
						continue 
					end
					local dist = (pos-base.Root.Position).Magnitude
					textLabel.Text = "["..math.floor(dist+.5).."]"
				end
			end)
			lib._DistCon = distCon
		end
		--------------------------------
		local updateCon;
		table.insert(self._CoreCons,lib.UserInputService.InputBegan:Connect(function(input)
			if input.KeyCode == esp.ButtonKey then
				updateCon = self.Added:Connect(function(self,esp,base) lib:CreateButton(self,esp,base) end)
				table.insert(self._CoreCons,updateCon)
				for _,base in ipairs(esp.BaseQueue) do lib:CreateButton(self,esp,base) end
			end
		end))
		table.insert(self._CoreCons,lib.UserInputService.InputEnded:Connect(function(input)
			if input.KeyCode == esp.ButtonKey then
				if updateCon then
					updateCon:Disconnect()
					table.remove(self._CoreCons,table.find(self._CoreCons,updateCon))
				end
				for _,base in ipairs(esp.BaseQueue) do 
					if base.Button then 
						lib:SafeDestroy(base.Button)
						base.Button = nil 
					end
				end
			end
		end))
		--------------------------------
	end,
	OnDestroy = function(self,esp)
		for _,con in ipairs(self._CoreCons) do con:Disconnect() end
		self.Toggled:Destroy()
		self.Added:Destroy()
		self.Removed:Destroy()
		local coreBase = lib.CoreGui:FindFirstChild("CoreBase")
		coreBase:SetAttribute("Count",coreBase:GetAttribute("Count")-1)
		if coreBase:GetAttribute("Count") == 0 then 
			coreBase:Destroy() 
			lib._DistCon:Disconnect()
			lib._DistCon = nil
			lib._DistLabels = nil
		end
	end,
	OnSpawned = function(self,esp,player,newSpawn)
		if not player:IsA("Player") or player == game:GetService("Players").LocalPlayer then return end
		local con;con = player.CharacterAdded:Connect(function() 
			con:Disconnect() 
			self:OnSpawned(esp,player) 
		end)
		table.insert(self._CoreCons,con)
		if not player.Character then return end
		local char = player.Character
		local hrp = char:FindFirstChild("HumanoidRootPart")
		if not hrp then
			table.insert(self._CoreCons,lib:WaitFor(char,"HumanoidRootPart",function()
				self:OnSpawned(esp,player)
			end))
			return
		end
		local startParent = char.Parent
		local base = lib:CreateBase(false,char,hrp)
		local con;con = base.Root.AncestryChanged:Connect(function()
			if not base.Root or not base.Root:IsDescendantOf(startParent) then
				con:Disconnect()
				self:OnRemoved(esp,base)
				base:Destroy()
				local index = table.find(esp.BaseQueue,base)
				if index then table.remove(esp.BaseQueue,index) end
			end
		end)
		table.insert(self._CoreCons,con)
		local isKiller,inGame = false,true
		lib:CreateText(base,esp,{
			{"PlayerDistance",function(label)
				self:StartTracking(base,label)
			end},
			{"PlayerName",function(label)
				label.Text = player.Name
			end}
		})
		table.insert(esp.BaseQueue,base)
		self:OnAdded(esp,base)
	end,
	StartTracking = function(self,base,label)
		label.Text = "[???]"
		lib._DistLabels[base] = label
	end,
	StopTracking = function(self,base)
		if lib._DistLabels[base] then
			lib._DistLabels[base] = nil
		end
	end,
	OnClicked = function(self,esp,base)
		local player = lib.Players.LocalPlayer
		local char = player.Character
		if not char then return end
		local root = char:FindFirstChild("HumanoidRootPart")
		if not root then return end
		TeleportTo(char,base.Root)
	end,
	OnAdded = function(self,esp,base)
		self.Added:Fire(self,esp,base)
	end,
	OnRemoved = function(self,esp,base)
		self.Removed:Fire(self,esp,base)
	end
}
function GetModel(part)
	local loop,last = part,nil
	while true do
		if loop == workspace then break
		elseif loop:IsA("Model") then last = loop end
		loop = loop.Parent
	end
	return last
end
function TeleportTo(char,target,num)
	local size1,size2 = GetModel(target):GetExtentsSize(),char:GetExtentsSize()
	local targ = target.CFrame*CFrame.new(0,(size1.Y/2)+(size2.Y/2),0)
	if not num then char.PrimaryPart = char.HumanoidRootPart; char:PivotTo(targ)
	else lib.TweenService:Create(char.HumanoidRootPart,TweenInfo.new(num),{CFrame = targ}):Play() end
end
lib:CreateEsp(esp)
