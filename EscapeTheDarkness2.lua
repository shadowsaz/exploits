--[[--
	|- lib:GrabSignal(index)
	|- lib:SpawnSignal(index)
		|-> signal:Fire(...)
		|-> signal:Connect(func)
		|-> signal:Invoke(...)
		|-> signal:SetInvoke(func)
		|-> signal:RemoveInvoke()
		|-> signal:Wait(timeout)
		|-> signal:Destroy()
	|- lib:SafeDestroy(object,waitTime)
	|- lib:WaitFor(parent,name,callback)
	|- lib:CreateBase(mode,child,root,offset)
	|- lib:CreateText(base,esp,data)
	|- lib:CreateButton(data,esp,base)
	|- lib:CreateEsp(data)
--]]--

local Toggle = "RightControl"

loadstring(game:HttpGet("https://raw.githubusercontent.com/shadowsaz/exploits/main/espTemplate.lua"))()
local lib = getgenv()._355743517261299712
local esp = {
	Folders = {workspace:WaitForChild("CurrentMap"):WaitForChild("Mechanics"):WaitForChild("Notes")},
	Toggled = lib:SpawnSignal(),
	Added = lib:SpawnSignal(),
	Removed = lib:SpawnSignal(),
	_ToggleKey = Enum.KeyCode[Toggle],
	_ButtonKey = Enum.KeyCode.LeftAlt,
	_CoreCons = {},
	OnCreate = function(self,esp)
		local coreBase = lib.CoreGui:FindFirstChild("CoreBase")
		if not coreBase then
			coreBase = Instance.new("ScreenGui")
			coreBase.Name = "CoreBase"
			coreBase.IgnoreGuiInset = true
			coreBase.ResetOnSpawn = false
			coreBase.DisplayOrder = 999999999
			coreBase:SetAttribute("Count",0)
			syn.protect_gui(coreBase)
			coreBase.Parent = lib.CoreGui
		end
		coreBase:SetAttribute("Count",coreBase:GetAttribute("Count")+1)
		--------------------------------
		if not lib._DistCon then
			lib._DistLabels = {}
			local distCon = lib.RunService.Stepped:Connect(function()
				if not esp.Enabled then return end
				local pos = workspace.CurrentCamera.CFrame.Position
				for base,textLabel in pairs(lib._DistLabels) do
					if not base.Root or not textLabel then 
						lib._DistLabels[base] = nil
						continue 
					end
					local dist = (pos-base.Root.Position).Magnitude
					textLabel.Text = "["..math.floor(dist+.5).."]"
				end
			end)
			lib._DistCon = distCon
		end
		--------------------------------
	end,
	OnDestroy = function(self,esp)
		for _,con in ipairs(self._CoreCons) do con:Disconnect() end
		self.Toggled:Destroy()
		self.Added:Destroy()
		self.Removed:Destroy()
		local coreBase = lib.CoreGui:FindFirstChild("CoreBase")
		coreBase:SetAttribute("Count",coreBase:GetAttribute("Count")-1)
		if coreBase:GetAttribute("Count") == 0 then 
			coreBase:Destroy() 
			lib._DistCon:Disconnect()
			lib._DistCon = nil
			lib._DistLabels = nil
		end
	end,
	OnSpawned = function(self,esp,note,newSpawn)
		local core = note:FindFirstChild("Note")
		if not core then
			table.insert(self._CoreCons,lib:WaitFor(note,"Note",function()
				self:OnSpawned(esp,note)
			end))
			return
		end
		local root = core:FindFirstChild("Root")
		if not core then
			table.insert(self._CoreCons,lib:WaitFor(core,"Root",function()
				self:OnSpawned(esp,note)
			end))
			return
		end
		local startParent = core
		local base = lib:CreateBase(false,core,root)
		local con;con = base.Root.AncestryChanged:Connect(function()
			if not base.Root or not base.Root:IsDescendantOf(startParent) then
				con:Disconnect()
				self:OnRemoved(esp,base)
				base:Destroy()
				local index = table.find(esp.BaseQueue,base)
				if index then table.remove(esp.BaseQueue,index) end
			end
		end)
		table.insert(self._CoreCons,con)
		base:ChangeColor(Color3.fromRGB(195,105,215))
		lib:CreateText(base,esp,{
			{"NoteDistance",function(label)
				self:StartTracking(base,label)
			end},
			{"NoteName",function(label)
				label.Text = "Note"
			end}
		})
		table.insert(esp.BaseQueue,base)
		self:OnAdded(esp,base)
	end,
	StartTracking = function(self,base,label)
		label.Text = "[???]"
		lib._DistLabels[base] = label
	end,
	StopTracking = function(self,base)
		if lib._DistLabels[base] then
			lib._DistLabels[base] = nil
		end
	end,
	OnAdded = function(self,esp,base)
		self.Added:Fire(self,esp,base)
	end,
	OnRemoved = function(self,esp,base)
		self.Removed:Fire(self,esp,base)
	end
}
lib:CreateEsp(esp)
